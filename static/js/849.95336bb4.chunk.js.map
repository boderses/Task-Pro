{"version":3,"file":"static/js/849.95336bb4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Forms/BoardForms/AddColumnForm/AddColumnForm.module.css?8bcc","components/Forms/BoardForms/AddColumnForm/AddColumnForm.jsx","webpack://react-homework-template/./src/components/Board/AddBtnColumn/AddBtnColumn.module.css?57c6","components/Board/AddBtnColumn/AddBtnColumn.jsx","webpack://react-homework-template/./src/components/PriorityOptions/PriorityOptions.module.css?75cd","components/PriorityOptions/PriorityOptions.jsx","webpack://react-homework-template/./src/components/Calendar/Calendar.module.css?a426","components/Calendar/Calendar.jsx","webpack://react-homework-template/./src/components/Forms/BoardForms/CardForm/CardForm.module.css?1a90","components/Forms/BoardForms/CardForm/CardForm.jsx","webpack://react-homework-template/./src/components/CardList/Progress/Progress.module.css?3286","components/CardList/Progress/Progress.jsx","webpack://react-homework-template/./src/components/CardList/Card/Card.module.css?9f53","components/CardList/Card/Card.jsx","components/CardList/CradList.jsx","webpack://react-homework-template/./src/components/ColumnsList/ColumnsList.module.css?4558","components/ColumnsList/Column.jsx","components/ColumnsList/ColumnsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Board/HeaderDashboard/HeaderDashboard.module.css?275b","components/Board/HeaderDashboard/HeaderDashboard.jsx","webpack://react-homework-template/./src/components/ScreensPage/Screens.page.module.css?c90b","components/ScreensPage/Screens.page.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addColumnModalTitle\":\"AddColumnForm_addColumnModalTitle__Z7Mlu\",\"addColumnForm\":\"AddColumnForm_addColumnForm__e+pwa\",\"addColumnInput\":\"AddColumnForm_addColumnInput__oRjOq\"};","import { useSelector, useDispatch } from 'react-redux';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport MainAddButton from 'components/Buttons/MainAddButton/MainAddButton';\r\nimport { addColumn, editColumn } from '../../../../redux/boards/operation';\r\nimport { selectBoard } from '../../../../redux/boards/selectors';\r\n\r\nimport css from './AddColumnForm.module.css';\r\n\r\nconst addColumnSchema = Yup.object().shape({\r\n  columnTitle: Yup.string().required('Please enter the title'),\r\n});\r\n\r\nconst AddColumnForm = ({\r\n  title,\r\n  action,\r\n  columnId,\r\n  columnTitle,\r\n  handleEditClose,\r\n  handleClose,\r\n}) => {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (values, actions) => {\r\n    if (columnId) {\r\n      dispatch(\r\n        editColumn({\r\n          columnId: columnId,\r\n          newColumnData: {\r\n            board: board._id,\r\n            title: values.columnTitle,\r\n          },\r\n        })\r\n      );\r\n      actions.resetForm();\r\n      handleEditClose();\r\n    } else {\r\n      dispatch(\r\n        addColumn({\r\n          title: values.columnTitle,\r\n          board: board._id,\r\n        })\r\n      );\r\n      actions.resetForm();\r\n      handleClose();\r\n    }\r\n  };\r\n  const initialValues = {\r\n    columnTitle: '',\r\n  };\r\n\r\n  if (columnId) {\r\n    initialValues.columnTitle = columnTitle;\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={addColumnSchema}\r\n      initialValues={initialValues}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <Form autoComplete=\"off\">\r\n        <h3 className={css.addColumnModalTitle}>{title}</h3>\r\n        <Field\r\n          className={css.addColumnInput}\r\n          as=\"input\"\r\n          type=\"text\"\r\n          name=\"columnTitle\"\r\n          placeholder=\"Title\"\r\n          required={true}\r\n          autoFocus\r\n        />\r\n        <MainAddButton text={action} />\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddColumnForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btnAddColumn\":\"AddBtnColumn_btnAddColumn__XuNkY\",\"btnPlus\":\"AddBtnColumn_btnPlus__GbWEl\"};","import { useState } from 'react';\r\n\r\nimport Modal from 'components/Modal/Modal';\r\nimport AddColumnForm from '../../Forms/BoardForms/AddColumnForm/AddColumnForm';\r\nimport sprite from 'assets/images/sprite.svg';\r\n\r\nimport css from './AddBtnColumn.module.css';\r\n\r\nconst AddBtnColumn = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setIsOpen(isOpen => !isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button className={css.btnAddColumn} type=\"button\" onClick={toggleModal}>\r\n        <div className={css.btnPlus}>\r\n          <svg aria-label=\"plus\">\r\n            <use href={`${sprite}#plus-20`}></use>\r\n          </svg>\r\n        </div>\r\n        <p className={css.btnText}>Add another column</p>\r\n      </button>\r\n      {isOpen && (\r\n        <Modal closeModal={toggleModal}>\r\n          <AddColumnForm\r\n            title=\"Add column\"\r\n            action=\"Add\"\r\n            handleClose={toggleModal}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddBtnColumn;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"labelWrapper\":\"PriorityOptions_labelWrapper__vkW8j\",\"label\":\"PriorityOptions_label__70Z+8\"};","import { Field } from 'formik';\r\n\r\nimport css from './PriorityOptions.module.css';\r\n\r\nconst PriorityOptions = ({ options, priority, active }) => {\r\n  return (\r\n    <ul className={css.labelWrapper}>\r\n      {options.map(({ value, color }) => (\r\n        <li key={value}>\r\n          <Field\r\n            as=\"input\"\r\n            type=\"radio\"\r\n            name=\"priority\"\r\n            value={value}\r\n            checked={priority === value}\r\n            className={css.label}\r\n            style={{ backgroundColor: color }}\r\n            onClick={active}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default PriorityOptions;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Calendar_button__q4tXD\"};","import { forwardRef } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport en from 'date-fns/locale/en-GB';\r\nimport sprite from '../../assets/images/sprite.svg';\r\n\r\nimport css from './Calendar.module.css';\r\n\r\nconst Calendar = ({ date, changeDate }) => {\r\n  const getDateFormat = date => {\r\n    const today = new Date();\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(today.getDate() + 1);\r\n    if (\r\n      date.getDate() === today.getDate() &&\r\n      date.getMonth() === today.getMonth() &&\r\n      date.getFullYear() === today.getFullYear()\r\n    ) {\r\n      return \"'Today', MMMM dd\";\r\n    } else if (\r\n      date.getDate() === tomorrow.getDate() &&\r\n      date.getMonth() === tomorrow.getMonth() &&\r\n      date.getFullYear() === tomorrow.getFullYear()\r\n    ) {\r\n      return \"'Tomorrow', MMMM dd\";\r\n    } else {\r\n      return 'EEEE, MMMM dd';\r\n    }\r\n  };\r\n\r\n  const CustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button type=\"button\" className={css.button} onClick={onClick} ref={ref}>\r\n      {value}\r\n      <svg>\r\n        <use href={`${sprite}#select-menu-16`} />\r\n      </svg>\r\n    </button>\r\n  ));\r\n\r\n  return (\r\n    <DatePicker\r\n      className={css.picker}\r\n      locale={en}\r\n      selected={date}\r\n      onChange={changeDate}\r\n      minDate={new Date()}\r\n      dateFormat={getDateFormat(date)}\r\n      onFocus={event => event.target.blur()}\r\n      onKeyDown={event => event.preventDefault()}\r\n      customInput={<CustomInput />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formTitle\":\"CardForm_formTitle__JZic0\",\"formText\":\"CardForm_formText__i1jmf\",\"inputForm\":\"CardForm_inputForm__aKrp9\",\"errorField\":\"CardForm_errorField__uhpaG\",\"label\":\"CardForm_label__UYNhy\",\"description\":\"CardForm_description__+gy7r CardForm_inputForm__aKrp9\",\"priorityWrapper\":\"CardForm_priorityWrapper__uH3B5\",\"deadlineWrapper\":\"CardForm_deadlineWrapper__jVY3-\"};","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport PriorityOptions from '../../../PriorityOptions/PriorityOptions';\r\nimport Calendar from '../../../Calendar/Calendar';\r\nimport MainAddButton from '../../../Buttons/MainAddButton/MainAddButton';\r\nimport { addTask, editTask } from '../../../../redux/boards/operation';\r\n\r\nimport css from './CardForm.module.css';\r\n\r\nconst addCardSchema = Yup.object().shape({\r\n  cardTitle: Yup.string()\r\n    .required('Please enter the title')\r\n    .max(25, 'Must be no more than 25 characters long'),\r\n  description: Yup.string(),\r\n});\r\n\r\nconst CardForm = ({\r\n  title,\r\n  action,\r\n  taskTitle,\r\n  taskDescription,\r\n  taskPriority,\r\n  taskDeadline,\r\n  taskId,\r\n  columnId,\r\n  handleClose,\r\n}) => {\r\n  const initialValues = {\r\n    cardTitle: '',\r\n    description: '',\r\n  };\r\n\r\n  const [priority, setPriority] = useState(taskPriority || 'Without');\r\n  const [deadline, setDeadline] = useState(\r\n    taskDeadline ? new Date(taskDeadline) : new Date()\r\n  );\r\n\r\n  if (taskId) {\r\n    initialValues.cardTitle = taskTitle;\r\n    initialValues.description = taskDescription;\r\n  }\r\n  const priorityChange = event => {\r\n    setPriority(event.target.value);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (values, actions) => {\r\n    const newCard = {\r\n      _id: taskId,\r\n      column: columnId,\r\n      title: values.cardTitle,\r\n      description: values.description,\r\n      priority: priority,\r\n      deadline: deadline.toISOString(),\r\n    };\r\n\r\n    const editCard = {\r\n      _id: taskId,\r\n      column: columnId,\r\n      title: values.cardTitle,\r\n      description: values.description,\r\n      priority: priority,\r\n      deadline: deadline.toISOString(),\r\n    };\r\n    if (taskId) {\r\n      dispatch(editTask(editCard));\r\n      actions.resetForm();\r\n      handleClose();\r\n    } else {\r\n      dispatch(addTask(newCard));\r\n      actions.resetForm();\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const priorityOptions = [\r\n    { value: 'Low', color: `var(--priority-low-color)` },\r\n    { value: 'Medium', color: `var(--priority-medium-color)` },\r\n    { value: 'High', color: `var(--priority-high-color)` },\r\n    { value: 'Without', color: `var(--priority-color-without)` },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={addCardSchema}\r\n      initialValues={initialValues}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <Form autoComplete=\"off\">\r\n        <h4 className={css.formTitle}>{title}</h4>\r\n        <label className={css.label} htmlFor=\"cardTitle\">\r\n          <Field\r\n            className={css.inputForm}\r\n            as=\"input\"\r\n            type=\"text\"\r\n            name=\"cardTitle\"\r\n            placeholder=\"Title\"\r\n            required={true}\r\n            autoFocus\r\n          />\r\n          <span className={css.errorField}>\r\n            <ErrorMessage name=\"cardTitle\" />\r\n          </span>\r\n        </label>\r\n        <label htmlFor=\"description\">\r\n          <Field\r\n            className={css.description}\r\n            as=\"textarea\"\r\n            type=\"text\"\r\n            name=\"description\"\r\n            placeholder=\"Description\"\r\n            required={true}\r\n          />\r\n        </label>\r\n        <div className={css.priorityWrapper}>\r\n          <p className={css.formText}>Label color</p>\r\n          <PriorityOptions\r\n            options={priorityOptions}\r\n            priority={priority}\r\n            active={priorityChange}\r\n          />\r\n        </div>\r\n        <div className={css.deadlineWrapper}>\r\n          <p className={css.formText}>Deadline</p>\r\n          <Calendar date={deadline} changeDate={setDeadline} />\r\n        </div>\r\n        <MainAddButton text={action} />\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default CardForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"popupMenu\":\"Progress_popupMenu__Wfs82\",\"progressList\":\"Progress_progressList__HcoPj\",\"progressListBtn\":\"Progress_progressListBtn__0uPZ2\",\"progressBtnSvg\":\"Progress_progressBtnSvg__iz1mo\"};","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { replaceTask } from '../../../redux/boards/operation';\r\nimport { selecColumnList } from '../../../redux/boards/selectors';\r\nimport sprite from 'assets/images/sprite.svg';\r\n\r\nimport css from './Progress.module.css';\r\n\r\nconst Progress = ({ closeMenu, columnId, currentTask }) => {\r\n  const columnsList = useSelector(selecColumnList);\r\n  const columnsWithoutCurrent = columnsList.filter(\r\n    column => column._id !== columnId\r\n  );\r\n\r\n  useEffect(() => {\r\n    const onEscClick = event => {\r\n      if (event.code === 'Escape') {\r\n        closeMenu();\r\n      }\r\n    };\r\n    window.addEventListener('keydown', onEscClick);\r\n    return () => {\r\n      window.removeEventListener('keydown', onEscClick);\r\n    };\r\n  }, [closeMenu]);\r\n\r\n  const dispatch = useDispatch();\r\n  const handleClick = newColumnId => {\r\n    dispatch(\r\n      replaceTask({\r\n        taskId: currentTask._id,\r\n        columnId: newColumnId,\r\n        currentColumnId: columnId,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={css.popupMenu}>\r\n      <ul className={css.progressList}>\r\n        {columnsWithoutCurrent.map(column => (\r\n          <li key={column.title}>\r\n            <button\r\n              className={css.progressListBtn}\r\n              onClick={() => handleClick(column._id)}\r\n              type=\"button\"\r\n            >\r\n              {column.title}\r\n              <svg className={css.progressBtnSvg}>\r\n                <use href={`${sprite}#remove-16`}></use>\r\n              </svg>\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Progress;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__ON4kR\",\"cardTitle\":\"Card_cardTitle__g5ID1\",\"cardDescription\":\"Card_cardDescription__4IM2l\",\"cardOptions\":\"Card_cardOptions__3hFkR\",\"optionsInfo\":\"Card_optionsInfo__DQNgr\",\"optonWrapper\":\"Card_optonWrapper__6un+L\",\"optionTitle\":\"Card_optionTitle__SnIyk\",\"priorityMark\":\"Card_priorityMark__I73Zm\",\"priorityLabel\":\"Card_priorityLabel__Obx4L\",\"optionsBtnList\":\"Card_optionsBtnList__OS6BE\",\"optionBtn\":\"Card_optionBtn__Jz55t\",\"deadlineNotify\":\"Card_deadlineNotify__WsWS3\",\"btnItem\":\"Card_btnItem__LfCJw\",\"optionBtnSvg\":\"Card_optionBtnSvg__r3nfr\",\"bell\":\"Card_bell__aZyA4\",\"progressContainer\":\"Card_progressContainer__CJhkd\",\"cardList\":\"Card_cardList__-H1zM\"};","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Modal from 'components/Modal/Modal';\r\nimport CardForm from 'components/Forms/BoardForms/CardForm/CardForm';\r\nimport Progress from '../Progress/Progress';\r\nimport { deleteTask } from '../../../redux/boards/operation';\r\nimport sprite from '../../../assets/images/sprite.svg';\r\n\r\nimport css from './Card.module.css';\r\n\r\nconst Card = ({ newCard, columnId }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n\r\n  const toggleModal = () => setShowModal(prevShowModal => !prevShowModal);\r\n  const toggleMenu = () => setShowMenu(prevShowMenu => !prevShowMenu);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteTask = () => {\r\n    dispatch(deleteTask(newCard._id));\r\n  };\r\n  const today = new Date()\r\n    .toISOString()\r\n    .replace(/T.*/, '')\r\n    .split('-')\r\n    .reverse()\r\n    .join('/');\r\n  const deadline = newCard.deadline\r\n    .replace(/T.*/, '')\r\n    .split('-')\r\n    .reverse()\r\n    .join('/');\r\n\r\n  const priority = newCard.priority;\r\n  let color;\r\n  switch (priority) {\r\n    case 'Low':\r\n      color = 'var(--priority-low-color)';\r\n      break;\r\n    case 'Medium':\r\n      color = 'var(--priority-medium-color)';\r\n      break;\r\n    case 'High':\r\n      color = 'var(--priority-high-color)';\r\n      break;\r\n    case 'Without':\r\n      color = 'var(--priority-color-without)';\r\n      break;\r\n    default:\r\n      color = `var(--priority-color-without)`;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={css.card} style={{ borderLeft: `4px solid ${color}` }}>\r\n        <h4 className={css.cardTitle}>{newCard.title}</h4>\r\n        <p className={css.cardDescription}>{newCard.description}</p>\r\n        <div className={css.cardOptions}>\r\n          <div className={css.optionsInfo}>\r\n            <div className={css.optionWrapper}>\r\n              <h5 className={css.optionTitle}>Priority</h5>\r\n              <div className={css.priorityLabel}>\r\n                <span\r\n                  className={css.priorityMark}\r\n                  style={{ backgroundColor: color }}\r\n                ></span>\r\n                <p>{newCard.priority}</p>\r\n              </div>\r\n            </div>\r\n            <div className={css.optionWrapper}>\r\n              <h5 className={css.optionTitle}>Deadline</h5>\r\n              <p>{deadline}</p>\r\n            </div>\r\n          </div>\r\n          <ul className={css.optionsBtnList}>\r\n            {today === deadline && (\r\n              <li className={css.deadlineNotify}>\r\n                <button className={css.optionBtn} type=\"button\">\r\n                  <svg className={css.bell}>\r\n                    <use href={`${sprite}#bell-16`}></use>\r\n                  </svg>\r\n                </button>\r\n              </li>\r\n            )}\r\n\r\n            <li>\r\n              <button\r\n                className={css.optionBtn}\r\n                type=\"button\"\r\n                onClick={toggleMenu}\r\n              >\r\n                <svg className={css.optionBtnSvg}>\r\n                  <use href={`${sprite}#remove-16`}></use>\r\n                </svg>\r\n              </button>\r\n              <div className={css.progressContainer}>\r\n                {showMenu && (\r\n                  <Progress\r\n                    closeMenu={toggleMenu}\r\n                    columnId={columnId}\r\n                    currentTask={newCard}\r\n                  />\r\n                )}\r\n              </div>\r\n            </li>\r\n            <li className={css.btnItem}>\r\n              <button\r\n                className={css.optionBtn}\r\n                type=\"button\"\r\n                onClick={toggleModal}\r\n              >\r\n                <svg className={css.optionBtnSvg}>\r\n                  <use href={`${sprite}#pencil-16`}></use>\r\n                </svg>\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button\r\n                className={css.optionBtn}\r\n                onClick={onDeleteTask}\r\n                type=\"button\"\r\n              >\r\n                <svg className={css.optionBtnSvg}>\r\n                  <use href={`${sprite}#trash-16`}></use>\r\n                </svg>\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      {showModal && (\r\n        <Modal closeModal={toggleModal}>\r\n          <CardForm\r\n            title=\"Edit card\"\r\n            action=\"Edit\"\r\n            taskTitle={newCard.title}\r\n            taskDescription={newCard.description}\r\n            taskId={newCard._id}\r\n            taskPriority={newCard.priority}\r\n            taskDeadline={newCard.deadline}\r\n            columnId={newCard.columnId}\r\n            handleClose={toggleModal}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport { selectVisibleTasks } from '../../redux/boards/selectors';\r\nimport Card from '../CardList/Card/Card';\r\n\r\nimport css from '../CardList/Card/Card.module.css';\r\n\r\nconst CardList = ({ columnId }) => {\r\n  const visibleCards = useSelector(selectVisibleTasks);\r\n  const columnCards = visibleCards.filter(item => item.columnId === columnId);\r\n  return (\r\n    <ul className={css.cardList}>\r\n      {columnCards.length > 0 && (\r\n        <>\r\n          {columnCards.map(card => (\r\n            <li key={card._id}>\r\n              <Card newCard={card} columnId={columnId} />\r\n            </li>\r\n          ))}\r\n        </>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"columnsListContainer\":\"ColumnsList_columnsListContainer__8WvIM\",\"columnList\":\"ColumnsList_columnList__CGM6A\",\"columnItem\":\"ColumnsList_columnItem__hXQxy\",\"columnTitle\":\"ColumnsList_columnTitle__oQkJX\",\"btnIcon\":\"ColumnsList_btnIcon__kspsU\",\"columnTitleIcon\":\"ColumnsList_columnTitleIcon__yH+vV\",\"cardContainer\":\"ColumnsList_cardContainer__2qNWH\"};","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport CardList from '../CardList/CradList';\r\nimport MainAddButton from '../Buttons/MainAddButton/MainAddButton';\r\nimport Modal from '../Modal/Modal';\r\nimport CardForm from '../Forms/BoardForms/CardForm/CardForm';\r\nimport { deleteColumn } from '../../redux/boards/operation';\r\nimport AddColumnForm from '../Forms/BoardForms/AddColumnForm/AddColumnForm';\r\nimport sprite from '../../assets/images/sprite.svg';\r\n\r\nimport css from '../ColumnsList/ColumnsList.module.css';\r\n\r\nconst Column = ({ id, title }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isModalColumnOpen, setIsModalColumnOpen] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setIsOpen(isOpen => !isOpen);\r\n  };\r\n\r\n  const handleModalColumnOpen = () => {\r\n    setIsModalColumnOpen(isModalColumnOpen => !isModalColumnOpen);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRemoveClick = () => {\r\n    dispatch(deleteColumn(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <p className={css.columnTitle}>\r\n        {title}\r\n        <button\r\n          className={css.btnIcon}\r\n          onClick={handleModalColumnOpen}\r\n          type=\"button\"\r\n        >\r\n          <svg className={css.columnTitleIcon} width={16} height={16}>\r\n            <use href={`${sprite}#pencil-16`}></use>\r\n          </svg>\r\n        </button>\r\n        <button\r\n          className={css.btnIcon}\r\n          onClick={handleRemoveClick}\r\n          type=\"button\"\r\n        >\r\n          <svg className={css.columnTitleIcon} width={16} height={16}>\r\n            <use href={`${sprite}#trash-16`}></use>\r\n          </svg>\r\n        </button>\r\n      </p>\r\n      <div className={css.cardContainer}>\r\n        <CardList columnId={id} />\r\n      </div>\r\n      <MainAddButton text=\"Add another card\" click={toggleModal} />\r\n      {isOpen && (\r\n        <Modal closeModal={toggleModal}>\r\n          <CardForm\r\n            title=\"Add card\"\r\n            action=\"Add\"\r\n            columnId={id}\r\n            handleClose={toggleModal}\r\n          />\r\n        </Modal>\r\n      )}\r\n      {isModalColumnOpen && (\r\n        <Modal closeModal={handleModalColumnOpen}>\r\n          <AddColumnForm\r\n            title=\"Edit column\"\r\n            action=\"Edit\"\r\n            columnId={id}\r\n            columnTitle={title}\r\n            handleEditClose={handleModalColumnOpen}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport { selecColumnList } from '../../redux/boards/selectors';\r\nimport AddBtnColumn from 'components/Board/AddBtnColumn/AddBtnColumn';\r\nimport Column from './Column';\r\n\r\nimport css from './ColumnsList.module.css';\r\n\r\nconst ColumnsList = () => {\r\n  const allColumns = useSelector(selecColumnList);\r\n\r\n  return (\r\n    <>\r\n      <div className={css.columnsListContainer}>\r\n        <ul className={css.columnList}>\r\n          {allColumns?.map(column => (\r\n            <li key={column._id} className={css.columnItem}>\r\n              <Column id={column._id} title={column.title} column={column} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <AddBtnColumn />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColumnsList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"filterTitle\":\"Filter_filterTitle__RcJsZ\",\"filterWrap\":\"Filter_filterWrap__XHmwM\",\"filterContainer\":\"Filter_filterContainer__V0rUi\",\"textLeabel\":\"Filter_textLeabel__AgOQ1\",\"buttonLeabel\":\"Filter_buttonLeabel__UbXBk\",\"leabelGroup\":\"Filter_leabelGroup__kbQv5\",\"label\":\"Filter_label__GdtNS\",\"labeltext\":\"Filter_labeltext__2KtXJ\",\"filterForm\":\"Filter_filterForm__vPN1h\"};","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Formik, Form, Field } from 'formik';\r\n\r\nimport { setFilter } from '../../redux/filter/slice';\r\n\r\nimport css from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = event => {\r\n    dispatch(setFilter(event.currentTarget.value));\r\n  };\r\n\r\n  const [priority, setPriority] = useState('');\r\n\r\n  const priorityOptions = [\r\n    {\r\n      value: 'Without',\r\n      color: `var(--priority-color-without)`,\r\n      text: 'Without priority',\r\n    },\r\n    { value: 'Low', color: `var(--priority-low-color)`, text: 'Low' },\r\n    { value: 'Medium', color: `var(--priority-medium-color)`, text: 'Medium' },\r\n    { value: 'High', color: `var(--priority-high-color)`, text: 'High' },\r\n  ];\r\n\r\n  const handleChange = event => {\r\n    setPriority(event.target.value);\r\n  };\r\n  const handleShowAll = () => {\r\n    setPriority('');\r\n    dispatch(setFilter(''));\r\n  };\r\n\r\n  const initialValues = {\r\n    background: '00',\r\n    priority: '',\r\n  };\r\n  return (\r\n    <div>\r\n      <h2 className={css.filterTitle}>Filters</h2>\r\n      <Formik initialValues={initialValues}>\r\n        <Form onChange={handleChange} className={css.filterForm}>\r\n          <div className={css.filterContainer}>\r\n            <div className={css.filterWrap}>\r\n              <p className={css.textLeabel}>Label color</p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleShowAll}\r\n                className={css.buttonLeabel}\r\n              >\r\n                Show all\r\n              </button>\r\n            </div>\r\n\r\n            {\r\n              <ul>\r\n                {priorityOptions.map(({ value, color, text }) => (\r\n                  <li key={value} className={css.leabelGroup}>\r\n                    <Field\r\n                      as=\"input\"\r\n                      type=\"radio\"\r\n                      name=\"priority\"\r\n                      value={value}\r\n                      checked={priority === value}\r\n                      style={{ backgroundColor: color }}\r\n                      onClick={handleChange}\r\n                      onChange={onChange}\r\n                      className={css.label}\r\n                    />{' '}\r\n                    <span className={css.labeltext}> {text}</span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            }\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\nexport default Filter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HeaderDashboard_container__74EA9\",\"projectTitle\":\"HeaderDashboard_projectTitle__6N6Cb\",\"buttonFilter\":\"HeaderDashboard_buttonFilter__DgJFp\",\"modalStyle\":\"HeaderDashboard_modalStyle__D9gaO\",\"filterTitle\":\"HeaderDashboard_filterTitle__vZAKR\"};","import { useState } from 'react';\r\n\r\nimport Filter from 'components/Filter/Filter';\r\nimport Modal from 'components/Modal/Modal';\r\nimport sprite from 'assets/images/sprite.svg';\r\n\r\nimport css from './HeaderDashboard.module.css';\r\n\r\nconst HeaderDashboard = ({ title }) => {\r\n  const [isOpen, setIsOpen] = useState();\r\n  const toggleModal = () => {\r\n    setIsOpen(isOpen => !isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className={css.container}>\r\n      <h2 className={css.projectTitle}>{title}</h2>\r\n      <button className={css.buttonFilter} type=\" button\" onClick={toggleModal}>\r\n        <svg\r\n          className={css.filterIcon}\r\n          aria-label=\"filter icon\"\r\n          width=\"16\"\r\n          height=\"16\"\r\n        >\r\n          <use href={`${sprite}#filter-16`}></use>\r\n        </svg>\r\n        <p className={css.filterTitle}>Filters</p>\r\n      </button>\r\n      {isOpen && (\r\n        <Modal\r\n          style={css.modalStyle}\r\n          closeModal={toggleModal}\r\n          children={<Filter />}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderDashboard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Screens_page_container__Y0fOA\",\"bgImage1\":\"Screens_page_bgImage1__-vDqF\",\"bgImage2\":\"Screens_page_bgImage2__IFynX\",\"bgImage3\":\"Screens_page_bgImage3__-MAlT\",\"bgImage4\":\"Screens_page_bgImage4__7cA0A\",\"bgImage5\":\"Screens_page_bgImage5__8H6Dm\",\"bgImage6\":\"Screens_page_bgImage6__Sjm9i\",\"bgImage7\":\"Screens_page_bgImage7__Wa9c7\",\"bgImage8\":\"Screens_page_bgImage8__kJTSf\",\"bgImage9\":\"Screens_page_bgImage9__AwFYC\",\"bgImage10\":\"Screens_page_bgImage10__1ZrER\",\"bgImage11\":\"Screens_page_bgImage11__PxJub\",\"bgImage12\":\"Screens_page_bgImage12__GkOuB\",\"bgImage13\":\"Screens_page_bgImage13__Nvqh1\",\"bgImage14\":\"Screens_page_bgImage14__0DSFN\",\"bgImage15\":\"Screens_page_bgImage15__KuIGh\"};","import { useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nimport ColumnsList from '../ColumnsList/ColumnsList';\r\nimport HeaderDashboard from 'components/Board/HeaderDashboard/HeaderDashboard';\r\nimport { selectBoard } from '../../redux/boards/selectors';\r\nimport css from './Screens.page.module.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ScreensPage = () => {\r\n  const { title, background } = useSelector(selectBoard);\r\n  \r\n  const getClassForBackground = background => {\r\n    switch (background) {\r\n      case '01':\r\n        return css.bgImage1;\r\n      case '02':\r\n        return css.bgImage2;\r\n      case '03':\r\n        return css.bgImage3;\r\n      case '04':\r\n        return css.bgImage4;\r\n      case '05':\r\n        return css.bgImage5;\r\n      case '06':\r\n        return css.bgImage6;\r\n      case '07':\r\n        return css.bgImage7;\r\n      case '08':\r\n        return css.bgImage8;\r\n      case '09':\r\n        return css.bgImage9;\r\n      case '10':\r\n        return css.bgImage10;\r\n      case '11':\r\n        return css.bgImage11;\r\n      case '12':\r\n        return css.bgImage12;\r\n      case '13':\r\n        return css.bgImage13;\r\n      case '14':\r\n        return css.bgImage14;\r\n      case '15':\r\n        return css.bgImage15;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    navigate(`/home/${title}`);\r\n    // eslint-disable-next-line\r\n  }, [title]);\r\n\r\n  const containerClass = `${css.container} ${getClassForBackground(background)}`;\r\n  return (\r\n    <>\r\n      <HeaderDashboard title={title} />\r\n      <div className={containerClass}>\r\n        <ColumnsList />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScreensPage;\r\n"],"names":["addColumnSchema","Yup","shape","columnTitle","required","_ref","title","action","columnId","handleEditClose","handleClose","board","useSelector","selectBoard","dispatch","useDispatch","initialValues","_jsx","Formik","validationSchema","onSubmit","values","actions","editColumn","newColumnData","_id","resetForm","addColumn","children","_jsxs","Form","autoComplete","className","css","Field","as","type","name","placeholder","autoFocus","MainAddButton","text","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","toggleModal","_Fragment","onClick","href","concat","sprite","Modal","closeModal","AddColumnForm","options","priority","active","map","_ref2","value","color","checked","style","backgroundColor","date","changeDate","CustomInput","forwardRef","ref","DatePicker","locale","en","selected","onChange","minDate","Date","dateFormat","today","tomorrow","setDate","getDate","getMonth","getFullYear","getDateFormat","onFocus","event","target","blur","onKeyDown","preventDefault","customInput","addCardSchema","cardTitle","max","description","taskTitle","taskDescription","taskPriority","taskDeadline","taskId","setPriority","_useState3","_useState4","deadline","setDeadline","newCard","column","toISOString","editCard","editTask","addTask","htmlFor","ErrorMessage","PriorityOptions","Calendar","closeMenu","currentTask","columnsWithoutCurrent","selecColumnList","filter","useEffect","onEscClick","code","window","addEventListener","removeEventListener","newColumnId","replaceTask","currentColumnId","showModal","setShowModal","showMenu","setShowMenu","prevShowModal","toggleMenu","prevShowMenu","replace","split","reverse","join","borderLeft","Progress","deleteTask","CardForm","columnCards","selectVisibleTasks","item","length","card","Card","id","isModalColumnOpen","setIsModalColumnOpen","handleModalColumnOpen","width","height","deleteColumn","CardList","click","allColumns","Column","AddBtnColumn","setFilter","currentTarget","handleChange","background","Filter","_useSelector","navigate","useNavigate","containerClass","getClassForBackground","HeaderDashboard","ColumnsList"],"sourceRoot":""}