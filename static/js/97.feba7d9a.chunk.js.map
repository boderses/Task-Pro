{"version":3,"file":"static/js/97.feba7d9a.chunk.js","mappings":"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","sources":["components/Forms/AuthForms/Schemas/Schemas.jsx","webpack://react-homework-template/./src/components/AuthNav/AuthNav.module.css?aff0","components/AuthNav/AuthNav.jsx","components/Forms/AuthForms/RegisterForm/RegisterForm.jsx","components/Forms/AuthForms/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/components/Logo/Logo.module.css?6a46","components/Logo/Logo.jsx","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["import * as yup from 'yup';\r\n\r\nconst Schema = yup.object({\r\n  name: yup\r\n    .string()\r\n    .trim()\r\n    .min(2, 'Name must be at least 2 characters')\r\n    .max(32, 'Name must be no more than 32 characters')\r\n    .matches(\r\n      /^[a-zA-Z0-9\\s]*$/,\r\n      'Name can only contain letters, numbers, and spaces'\r\n    ),\r\n  email: yup\r\n    .string()\r\n    .trim()\r\n    .email()\r\n    .required('Email is required')\r\n    .matches(\r\n      /^[a-zA-Z0-9.-_]+@[a-zA-Z]+\\.[a-zA-Z]{2,3}$/,\r\n      'Invalid email format'\r\n    ),\r\n  password: yup\r\n    .string()\r\n    .trim()\r\n    .required('Password is required')\r\n    .min(8, 'Password must be at least 8 characters')\r\n    .max(64, 'Password must be no more than 64 characters')\r\n    .test(\r\n      'no-spaces',\r\n      'Password cannot contain spaces',\r\n      value => !/\\s/.test(value)\r\n    ),\r\n});\r\n\r\nexport default Schema;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"AuthNav_box__t51Lo\",\"form\":\"AuthNav_form__+OYAk\",\"input\":\"AuthNav_input__Ygigj\",\"inputBox\":\"AuthNav_inputBox__buHHy\",\"wrap\":\"AuthNav_wrap__lcBua\",\"icon\":\"AuthNav_icon__ab7KB\",\"links\":\"AuthNav_links__l24YE\",\"link\":\"AuthNav_link__VqAmU\",\"activelink\":\"AuthNav_activelink__DsZUZ\",\"errorMessage\":\"AuthNav_errorMessage__TbbNg\",\"wrapper\":\"AuthNav_wrapper__CX-iC\",\"button\":\"AuthNav_button__67zlz\"};","import { NavLink } from 'react-router-dom';\r\n\r\nimport style from './AuthNav.module.css';\r\n\r\nconst ActiveAuthLink = () => {\r\n  return (\r\n    <div className={style.links}>\r\n      <NavLink\r\n        className={({ isActive }) =>\r\n          isActive ? `${style.link} ${style.activelink}` : style.link\r\n        }\r\n        to={`/auth/register`}\r\n      >\r\n        Registration\r\n      </NavLink>\r\n      <NavLink\r\n        className={({ isActive }) =>\r\n          isActive ? `${style.link} ${style.activelink}` : style.link\r\n        }\r\n        to={`/auth/login`}\r\n      >\r\n        Log In\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActiveAuthLink;\r\n","import { useState } from 'react';\r\nimport { register } from '../../../../redux/auth/operation';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\n\r\nimport Schema from '../Schemas/Schemas';\r\nimport ActiveAuth from 'components/AuthNav/AuthNav';\r\nimport { selectIsLoadingRegister } from '../../../../redux/auth/selectors';\r\nimport sprite from '../../../../assets/images/sprite.svg';\r\n\r\nimport style from '../../../AuthNav/AuthNav.module.css';\r\n\r\nconst RegisterForm = () => {\r\n  const dispatch = useDispatch();\r\n  const initialValues = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    dispatch(register(values));\r\n    resetForm();\r\n  };\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handleTogglePassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n  const isLoading = useSelector(selectIsLoadingRegister);\r\n\r\n  return (\r\n    <div className={style.box}>\r\n      <ActiveAuth />\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={Schema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className={style.form} autoComplete=\"off\">\r\n            <div className={style.inputBox}>\r\n              <div className={style.wrap}>\r\n                <ErrorMessage\r\n                  name=\"name\"\r\n                  render={message => (\r\n                    <p className={style.errorMessage}>{message}</p>\r\n                  )}\r\n                />\r\n                <Field\r\n                  className={style.input}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                />\r\n              </div>\r\n              <div className={style.wrap}>\r\n                <ErrorMessage\r\n                  name=\"email\"\r\n                  render={message => (\r\n                    <p className={style.errorMessage}>{message}</p>\r\n                  )}\r\n                />\r\n                <Field\r\n                  className={style.input}\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Enter your email\"\r\n                />\r\n              </div>\r\n              <div className={style.wrap}>\r\n                <ErrorMessage\r\n                  name=\"password\"\r\n                  render={message => (\r\n                    <p className={style.errorMessage}>{message}</p>\r\n                  )}\r\n                />\r\n                <Field\r\n                  className={style.input}\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  name=\"password\"\r\n                  placeholder=\"Confirm a password\"\r\n                />\r\n                <div className={style.wrapper}>\r\n                  {showPassword ? (\r\n                    <svg\r\n                      width={18}\r\n                      height={18}\r\n                      className={style.icon}\r\n                      onClick={handleTogglePassword}\r\n                    >\r\n                      <use href={`${sprite}#password-eye-18`} />\r\n                    </svg>\r\n                  ) : (\r\n                    <svg\r\n                      width={18}\r\n                      height={18}\r\n                      className={style.icon}\r\n                      onClick={handleTogglePassword}\r\n                    >\r\n                      <use href={`${sprite}#icon-eye-off-1`} />\r\n                    </svg>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <button\r\n              className={style.button}\r\n              type=\"submit\"\r\n              disabled={isSubmitting || isLoading}\r\n            >\r\n              {isLoading ? 'Loading...' : 'Register Now'}{' '}\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\n\r\nimport Schema from '../Schemas/Schemas';\r\n\r\nimport { logIn } from '../../../../redux/auth/operation';\r\nimport { selectIsLoadingLogin } from '../../../../redux/auth/selectors';\r\nimport ActiveAuth from 'components/AuthNav/AuthNav';\r\nimport sprite from '../../../../assets/images/sprite.svg';\r\n\r\nimport style from '../../../AuthNav/AuthNav.module.css';\r\n\r\nconst LoginForm = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(selectIsLoadingLogin);\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    dispatch(logIn(values));\r\n    resetForm();\r\n  };\r\n  const initialValues = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handleTogglePassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  return (\r\n    <div className={style.box}>\r\n      <ActiveAuth />\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={Schema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className={style.form}>\r\n            <div className={style.inputBox}>\r\n              <div className={style.wrap}>\r\n                <ErrorMessage\r\n                  name=\"email\"\r\n                  render={message => (\r\n                    <p className={style.errorMessage}>{message}</p>\r\n                  )}\r\n                />\r\n                <Field\r\n                  className={style.input}\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Enter your email\"\r\n                />\r\n              </div>\r\n              <div className={style.wrap}>\r\n                <ErrorMessage\r\n                  name=\"password\"\r\n                  render={message => (\r\n                    <p className={style.errorMessage}>{message}</p>\r\n                  )}\r\n                />\r\n                <Field\r\n                  className={style.input}\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  name=\"password\"\r\n                  placeholder=\"Confirm a password\"\r\n                />\r\n                <div className={style.wrapper}>\r\n                  {showPassword ? (\r\n                    <svg\r\n                      width={18}\r\n                      height={18}\r\n                      className={style.icon}\r\n                      onClick={handleTogglePassword}\r\n                    >\r\n                      <use href={`${sprite}#password-eye-18`} />\r\n                    </svg>\r\n                  ) : (\r\n                    <svg\r\n                      width={18}\r\n                      height={18}\r\n                      className={style.icon}\r\n                      onClick={handleTogglePassword}\r\n                    >\r\n                      <use href={`${sprite}#icon-eye-off-1`} />\r\n                    </svg>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <button\r\n              className={style.button}\r\n              type=\"submit\"\r\n              disabled={isSubmitting || isLoading}\r\n            >\r\n              {isLoading ? 'Loading...' : 'Log In Now'}\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"logo\":\"Logo_logo__3mY7m\"};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport style from './Logo.module.css';\r\n\r\nconst Logo = () => {\r\n  const linkStyles = {\r\n    textDecoration: 'underline',\r\n  };\r\n  return (\r\n    <span className={style.logo}>\r\n      ©\r\n      <Link to=\"/\" style={linkStyles}>\r\n        TaskPro\r\n      </Link>\r\n      2024\r\n    </span>\r\n  );\r\n};\r\nexport default Logo;\r\n","import { useParams } from 'react-router-dom';\r\n\r\nimport Wrapper from 'components/Forms/AuthForms/Wrapper/Wrapper';\r\nimport RegisterForm from 'components/Forms/AuthForms/RegisterForm/RegisterForm';\r\nimport LoginForm from 'components/Forms/AuthForms/LoginForm/LoginForm';\r\nimport Logo from 'components/Logo/Logo';\r\n\r\nconst AuthPage = () => {\r\n  const { id } = useParams();\r\n  return (\r\n    <Wrapper>\r\n      {id === 'register' ? <RegisterForm /> : <LoginForm />}\r\n      <Logo />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n"],"names":["yup","name","trim","min","max","matches","email","required","password","test","value","_jsxs","className","style","children","_jsx","NavLink","_ref","isActive","concat","to","_ref2","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handleTogglePassword","isLoading","useSelector","selectIsLoadingRegister","ActiveAuth","Formik","initialValues","validationSchema","Schema","onSubmit","values","resetForm","register","isSubmitting","Form","autoComplete","ErrorMessage","render","message","Field","type","placeholder","width","height","onClick","href","sprite","disabled","selectIsLoadingLogin","logIn","Link","textDecoration","id","useParams","Wrapper","RegisterForm","LoginForm","Logo"],"sourceRoot":""}